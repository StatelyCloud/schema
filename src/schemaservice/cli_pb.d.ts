// @generated by protoc-gen-es v2.2.2 with parameter "target=js+dts,import_extension=.js"
// @generated from file schemaservice/cli.proto (package stately.schemaservice, syntax proto3)
/* eslint-disable */

import type { Message } from "@bufbuild/protobuf";
import type { GenFile, GenMessage } from "@bufbuild/protobuf/codegenv1";
import type { FileDescriptorProto } from "@bufbuild/protobuf/wkt";
import type { StatelyErrorDetails } from "../errors/error_details_pb.js";
import type { Migration } from "../migration_pb.js";

/**
 * Describes the file schemaservice/cli.proto.
 */
export declare const file_schemaservice_cli: GenFile;

/**
 * DSLResponse is not actually used by the service - it's the contract between
 * the JS Schema DSL and the CLI. When the CLI executes the NodeJS code, it will
 * generate a DSLResponse that communicates results, error states, etc.
 *
 * @generated from message stately.schemaservice.DSLResponse
 */
export declare type DSLResponse = Message<"stately.schemaservice.DSLResponse"> & {
  /**
   * file_descriptor is the representation of the complete Schema in Protobuf as generated by the Stately Schema CLI.
   * All nested messages and enums must be defined in the this one file so it is fully self-contained.
   * file_descriptor must be a valid FileDescriptorProto which contains no imports.
   *
   * @generated from field: google.protobuf.FileDescriptorProto file_descriptor = 1;
   */
  fileDescriptor?: FileDescriptorProto;

  /**
   * migrations are a list of of commands to convert from one schema version to
   * the next. This list should contain at least one migration unless this is
   * the first version of the schema. It may contain more than one migration for
   * the same from_schema_version. It may also contain migrations for earlier
   * from_schema_versions - those should be ignored.
   *
   * @generated from field: repeated stately.schemamodel.Migration migrations = 2;
   */
  migrations: Migration[];

  /**
   * errors is a list of errors that occurred during the execution of the DSL.
   * In the common case of an error, this will be the only field set, and it
   * will contain a single error. But it is possible that we have multiple
   * errors, or we have errors along with other information (e.g. to pass along
   * to the backend in order to accumulate all errors at once.)
   *
   * @generated from field: repeated stately.errors.StatelyErrorDetails errors = 3;
   */
  errors: StatelyErrorDetails[];

  /**
   * dsl_version is the version of the DSL package that was used to generate
   * this response.
   *
   * @generated from field: string dsl_version = 4;
   */
  dslVersion: string;
};

/**
 * Describes the message stately.schemaservice.DSLResponse.
 * Use `create(DSLResponseSchema)` to create a new message.
 */
export declare const DSLResponseSchema: GenMessage<DSLResponse>;
