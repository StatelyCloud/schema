// @generated by protoc-gen-es v1.10.0 with parameter "target=js+dts"
// @generated from file options.proto (package stately.schemamodel, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import { proto3 } from "@bufbuild/protobuf";

/**
 * TODO: Not sure if I'll regret using a single "number" enum for ints and
 * floats, but we can always fork them later.
 *
 * @generated from enum stately.schemamodel.NumberInterpretAs
 */
export const NumberInterpretAs = /*@__PURE__*/ proto3.makeEnum(
  "stately.schemamodel.NumberInterpretAs",
  [
    { no: 0, name: "NUMBER_INTERPRET_AS_NUMBER", localName: "NUMBER" },
    { no: 1, name: "NUMBER_INTERPRET_AS_TIMESTAMP_SECONDS", localName: "TIMESTAMP_SECONDS" },
    {
      no: 2,
      name: "NUMBER_INTERPRET_AS_TIMESTAMP_MILLISECONDS",
      localName: "TIMESTAMP_MILLISECONDS",
    },
    {
      no: 3,
      name: "NUMBER_INTERPRET_AS_TIMESTAMP_MICROSECONDS",
      localName: "TIMESTAMP_MICROSECONDS",
    },
    { no: 4, name: "NUMBER_INTERPRET_AS_DURATION_SECONDS", localName: "DURATION_SECONDS" },
    {
      no: 5,
      name: "NUMBER_INTERPRET_AS_DURATION_MILLISECONDS",
      localName: "DURATION_MILLISECONDS",
    },
  ],
);

/**
 * @generated from enum stately.schemamodel.BytesInterpretAs
 */
export const BytesInterpretAs = /*@__PURE__*/ proto3.makeEnum(
  "stately.schemamodel.BytesInterpretAs",
  [
    { no: 0, name: "BYTES_INTERPRET_AS_BYTES", localName: "BYTES" },
    { no: 1, name: "BYTES_INTERPRET_AS_UUID", localName: "UUID" },
  ],
);

/**
 * @generated from enum stately.schemamodel.StringInterpretAs
 */
export const StringInterpretAs = /*@__PURE__*/ proto3.makeEnum(
  "stately.schemamodel.StringInterpretAs",
  [
    { no: 0, name: "STRING_INTERPRET_AS_STRING", localName: "STRING" },
    { no: 1, name: "STRING_INTERPRET_AS_KEY_PATH", localName: "KEY_PATH" },
    { no: 2, name: "STRING_INTERPRET_AS_URL", localName: "URL" },
  ],
);

/**
 * @generated from message stately.schemamodel.MessageOptions
 */
export const MessageOptions = /*@__PURE__*/ proto3.makeMessageType(
  "stately.schemamodel.MessageOptions",
  () => [
    { no: 1, name: "key_paths", kind: "message", T: MessageOptions_KeyPath, repeated: true },
    { no: 2, name: "ttl", kind: "message", T: Ttl },
    { no: 4, name: "indexes", kind: "message", T: MessageOptions_Index, repeated: true },
  ],
);

/**
 * @generated from message stately.schemamodel.MessageOptions.KeyPath
 */
export const MessageOptions_KeyPath = /*@__PURE__*/ proto3.makeMessageType(
  "stately.schemamodel.MessageOptions.KeyPath",
  () => [{ no: 1, name: "path_template", kind: "scalar", T: 9 /* ScalarType.STRING */ }],
  { localName: "MessageOptions_KeyPath" },
);

/**
 * Index configures how we should build indexes based on the fields of the
 * item. Today this can only configure LSIs but could be extended to configure
 * other indexes, or we could use another structure for that.
 *
 * @generated from message stately.schemamodel.MessageOptions.Index
 */
export const MessageOptions_Index = /*@__PURE__*/ proto3.makeMessageType(
  "stately.schemamodel.MessageOptions.Index",
  () => [
    { no: 1, name: "property_path", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "group_local_index", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
  ],
  { localName: "MessageOptions_Index" },
);

/**
 * @generated from message stately.schemamodel.Ttl
 */
export const Ttl = /*@__PURE__*/ proto3.makeMessageType("stately.schemamodel.Ttl", () => [
  { no: 1, name: "duration_seconds", kind: "scalar", T: 4 /* ScalarType.UINT64 */, oneof: "value" },
  { no: 2, name: "field", kind: "scalar", T: 9 /* ScalarType.STRING */, oneof: "value" },
  { no: 3, name: "source", kind: "enum", T: proto3.getEnumType(Ttl_TtlSource) },
]);

/**
 * TtlSource is an enum that specifies how the TTL of an item should be
 * calculated based on the value of a field.
 *
 * @generated from enum stately.schemamodel.Ttl.TtlSource
 */
export const Ttl_TtlSource = /*@__PURE__*/ proto3.makeEnum("stately.schemamodel.Ttl.TtlSource", [
  { no: 0, name: "TTL_SOURCE_UNSET", localName: "UNSET" },
  { no: 1, name: "TTL_SOURCE_FROM_CREATED", localName: "FROM_CREATED" },
  { no: 2, name: "TTL_SOURCE_FROM_LAST_MODIFIED", localName: "FROM_LAST_MODIFIED" },
  { no: 3, name: "TTL_SOURCE_AT_TIMESTAMP", localName: "AT_TIMESTAMP" },
]);

/**
 * @generated from message stately.schemamodel.FieldOptions
 */
export const FieldOptions = /*@__PURE__*/ proto3.makeMessageType(
  "stately.schemamodel.FieldOptions",
  () => [
    { no: 1, name: "float", kind: "message", T: FloatOptions, oneof: "type" },
    { no: 2, name: "double", kind: "message", T: DoubleOptions, oneof: "type" },
    { no: 3, name: "int32", kind: "message", T: Int32Options, oneof: "type" },
    { no: 4, name: "int64", kind: "message", T: Int64Options, oneof: "type" },
    { no: 5, name: "uint32", kind: "message", T: UInt32Options, oneof: "type" },
    { no: 6, name: "uint64", kind: "message", T: UInt64Options, oneof: "type" },
    { no: 7, name: "sint32", kind: "message", T: SInt32Options, oneof: "type" },
    { no: 8, name: "sint64", kind: "message", T: SInt64Options, oneof: "type" },
    { no: 9, name: "fixed32", kind: "message", T: Fixed32Options, oneof: "type" },
    { no: 10, name: "fixed64", kind: "message", T: Fixed64Options, oneof: "type" },
    { no: 11, name: "sfixed32", kind: "message", T: SFixed32Options, oneof: "type" },
    { no: 12, name: "sfixed64", kind: "message", T: SFixed64Options, oneof: "type" },
    { no: 13, name: "bool", kind: "message", T: BoolOptions, oneof: "type" },
    { no: 14, name: "string", kind: "message", T: StringOptions, oneof: "type" },
    { no: 15, name: "bytes", kind: "message", T: BytesOptions, oneof: "type" },
    {
      no: 24,
      name: "initial_value",
      kind: "enum",
      T: proto3.getEnumType(FieldOptions_InitialValue),
      oneof: "value",
    },
    {
      no: 25,
      name: "from_metadata",
      kind: "enum",
      T: proto3.getEnumType(FieldOptions_FromMetadata),
      oneof: "value",
    },
    {
      no: 26,
      name: "cel_expression",
      kind: "scalar",
      T: 9 /* ScalarType.STRING */,
      oneof: "value",
    },
  ],
);

/**
 * @generated from enum stately.schemamodel.FieldOptions.FromMetadata
 */
export const FieldOptions_FromMetadata = /*@__PURE__*/ proto3.makeEnum(
  "stately.schemamodel.FieldOptions.FromMetadata",
  [
    { no: 0, name: "FROM_METADATA_UNSPECIFIED", localName: "UNSPECIFIED" },
    { no: 1, name: "FROM_METADATA_CREATED_AT_TIME", localName: "CREATED_AT_TIME" },
    { no: 2, name: "FROM_METADATA_LAST_MODIFIED_AT_TIME", localName: "LAST_MODIFIED_AT_TIME" },
    { no: 3, name: "FROM_METADATA_CREATED_AT_VERSION", localName: "CREATED_AT_VERSION" },
    {
      no: 4,
      name: "FROM_METADATA_LAST_MODIFIED_AT_VERSION",
      localName: "LAST_MODIFIED_AT_VERSION",
    },
    { no: 5, name: "FROM_METADATA_UPDATE_COUNT", localName: "UPDATE_COUNT" },
    { no: 6, name: "FROM_METADATA_KEY_PATH", localName: "KEY_PATH" },
  ],
);

/**
 * InitialValue specifies where the initial value for a field should come from
 * if it is not explicitly set when created. All of these values would be
 * assigned by the server at creation time.
 *
 * @generated from enum stately.schemamodel.FieldOptions.InitialValue
 */
export const FieldOptions_InitialValue = /*@__PURE__*/ proto3.makeEnum(
  "stately.schemamodel.FieldOptions.InitialValue",
  [
    { no: 0, name: "INITIAL_VALUE_NONE", localName: "NONE" },
    { no: 1, name: "INITIAL_VALUE_SEQUENCE", localName: "SEQUENCE" },
    { no: 2, name: "INITIAL_VALUE_UUID", localName: "UUID" },
    { no: 4, name: "INITIAL_VALUE_RAND53", localName: "RAND53" },
  ],
);

/**
 * The following are options that differ based on the underlying type of the field.
 *
 * default sets the default value for this field. Usually a proto field's
 * default (unset) value would be 0, but if this is set, it will be used
 * instead when the field is unset. Setting this option implies the "optional"
 * (or field_presence.explicit) field option is also set to true, since
 * otherwise you could not distinguish between the field being unset and the
 * field being set to the default value.
 * float default = 1;
 *
 * @generated from message stately.schemamodel.FloatOptions
 */
export const FloatOptions = /*@__PURE__*/ proto3.makeMessageType(
  "stately.schemamodel.FloatOptions",
  () => [{ no: 2, name: "interpret_as", kind: "enum", T: proto3.getEnumType(NumberInterpretAs) }],
);

/**
 * default sets the default value for this field. Usually a proto field's
 * default (unset) value would be 0, but if this is set, it will be used
 * instead when the field is unset. Setting this option implies the "optional"
 * (or field_presence.explicit) field option is also set to true, since
 * otherwise you could not distinguish between the field being unset and the
 * field being set to the default value.
 * double default = 1;
 *
 * @generated from message stately.schemamodel.DoubleOptions
 */
export const DoubleOptions = /*@__PURE__*/ proto3.makeMessageType(
  "stately.schemamodel.DoubleOptions",
  () => [{ no: 2, name: "interpret_as", kind: "enum", T: proto3.getEnumType(NumberInterpretAs) }],
);

/**
 * default sets the default value for this field. Usually a proto field's
 * default (unset) value would be 0, but if this is set, it will be used
 * instead when the field is unset. Setting this option implies the "optional"
 * (or field_presence.explicit) field option is also set to true, since
 * otherwise you could not distinguish between the field being unset and the
 * field being set to the default value.
 * int32 default = 1;
 *
 * @generated from message stately.schemamodel.Int32Options
 */
export const Int32Options = /*@__PURE__*/ proto3.makeMessageType(
  "stately.schemamodel.Int32Options",
  () => [{ no: 2, name: "interpret_as", kind: "enum", T: proto3.getEnumType(NumberInterpretAs) }],
);

/**
 * default sets the default value for this field. Usually a proto field's
 * default (unset) value would be 0, but if this is set, it will be used
 * instead when the field is unset. Setting this option implies the "optional"
 * (or field_presence.explicit) field option is also set to true, since
 * otherwise you could not distinguish between the field being unset and the
 * field being set to the default value.
 * int64 default = 1;
 *
 * @generated from message stately.schemamodel.Int64Options
 */
export const Int64Options = /*@__PURE__*/ proto3.makeMessageType(
  "stately.schemamodel.Int64Options",
  () => [{ no: 2, name: "interpret_as", kind: "enum", T: proto3.getEnumType(NumberInterpretAs) }],
);

/**
 * default sets the default value for this field. Usually a proto field's
 * default (unset) value would be 0, but if this is set, it will be used
 * instead when the field is unset. Setting this option implies the "optional"
 * (or field_presence.explicit) field option is also set to true, since
 * otherwise you could not distinguish between the field being unset and the
 * field being set to the default value.
 * uint32 default = 1;
 *
 * @generated from message stately.schemamodel.UInt32Options
 */
export const UInt32Options = /*@__PURE__*/ proto3.makeMessageType(
  "stately.schemamodel.UInt32Options",
  () => [{ no: 2, name: "interpret_as", kind: "enum", T: proto3.getEnumType(NumberInterpretAs) }],
);

/**
 * default sets the default value for this field. Usually a proto field's
 * default (unset) value would be 0, but if this is set, it will be used
 * instead when the field is unset. Setting this option implies the "optional"
 * (or field_presence.explicit) field option is also set to true, since
 * otherwise you could not distinguish between the field being unset and the
 * field being set to the default value.
 * uint64 default = 1;
 *
 * @generated from message stately.schemamodel.UInt64Options
 */
export const UInt64Options = /*@__PURE__*/ proto3.makeMessageType(
  "stately.schemamodel.UInt64Options",
  () => [{ no: 2, name: "interpret_as", kind: "enum", T: proto3.getEnumType(NumberInterpretAs) }],
);

/**
 * default sets the default value for this field. Usually a proto field's
 * default (unset) value would be 0, but if this is set, it will be used
 * instead when the field is unset. Setting this option implies the "optional"
 * (or field_presence.explicit) field option is also set to true, since
 * otherwise you could not distinguish between the field being unset and the
 * field being set to the default value.
 * sint32 default = 1;
 *
 * @generated from message stately.schemamodel.SInt32Options
 */
export const SInt32Options = /*@__PURE__*/ proto3.makeMessageType(
  "stately.schemamodel.SInt32Options",
  () => [{ no: 2, name: "interpret_as", kind: "enum", T: proto3.getEnumType(NumberInterpretAs) }],
);

/**
 * default sets the default value for this field. Usually a proto field's
 * default (unset) value would be 0, but if this is set, it will be used
 * instead when the field is unset. Setting this option implies the "optional"
 * (or field_presence.explicit) field option is also set to true, since
 * otherwise you could not distinguish between the field being unset and the
 * field being set to the default value.
 * sint64 default = 1;
 *
 * @generated from message stately.schemamodel.SInt64Options
 */
export const SInt64Options = /*@__PURE__*/ proto3.makeMessageType(
  "stately.schemamodel.SInt64Options",
  () => [{ no: 2, name: "interpret_as", kind: "enum", T: proto3.getEnumType(NumberInterpretAs) }],
);

/**
 * default sets the default value for this field. Usually a proto field's
 * default (unset) value would be 0, but if this is set, it will be used
 * instead when the field is unset. Setting this option implies the "optional"
 * (or field_presence.explicit) field option is also set to true, since
 * otherwise you could not distinguish between the field being unset and the
 * field being set to the default value.
 * fixed32 default = 1;
 *
 * @generated from message stately.schemamodel.Fixed32Options
 */
export const Fixed32Options = /*@__PURE__*/ proto3.makeMessageType(
  "stately.schemamodel.Fixed32Options",
  () => [{ no: 2, name: "interpret_as", kind: "enum", T: proto3.getEnumType(NumberInterpretAs) }],
);

/**
 * default sets the default value for this field. Usually a proto field's
 * default (unset) value would be 0, but if this is set, it will be used
 * instead when the field is unset. Setting this option implies the "optional"
 * (or field_presence.explicit) field option is also set to true, since
 * otherwise you could not distinguish between the field being unset and the
 * field being set to the default value.
 * fixed64 default = 1;
 *
 * @generated from message stately.schemamodel.Fixed64Options
 */
export const Fixed64Options = /*@__PURE__*/ proto3.makeMessageType(
  "stately.schemamodel.Fixed64Options",
  () => [{ no: 2, name: "interpret_as", kind: "enum", T: proto3.getEnumType(NumberInterpretAs) }],
);

/**
 * default sets the default value for this field. Usually a proto field's
 * default (unset) value would be 0, but if this is set, it will be used
 * instead when the field is unset. Setting this option implies the "optional"
 * (or field_presence.explicit) field option is also set to true, since
 * otherwise you could not distinguish between the field being unset and the
 * field being set to the default value.
 * sfixed32 default = 1;
 *
 * @generated from message stately.schemamodel.SFixed32Options
 */
export const SFixed32Options = /*@__PURE__*/ proto3.makeMessageType(
  "stately.schemamodel.SFixed32Options",
  () => [{ no: 2, name: "interpret_as", kind: "enum", T: proto3.getEnumType(NumberInterpretAs) }],
);

/**
 * default sets the default value for this field. Usually a proto field's
 * default (unset) value would be 0, but if this is set, it will be used
 * instead when the field is unset. Setting this option implies the "optional"
 * (or field_presence.explicit) field option is also set to true, since
 * otherwise you could not distinguish between the field being unset and the
 * field being set to the default value.
 * sfixed64 default = 1;
 *
 * @generated from message stately.schemamodel.SFixed64Options
 */
export const SFixed64Options = /*@__PURE__*/ proto3.makeMessageType(
  "stately.schemamodel.SFixed64Options",
  () => [{ no: 2, name: "interpret_as", kind: "enum", T: proto3.getEnumType(NumberInterpretAs) }],
);

/**
 * default sets the default value for this field. Usually a proto field's
 * default (unset) value would be 0, but if this is set, it will be used
 * instead when the field is unset. Setting this option implies the "optional"
 * (or field_presence.explicit) field option is also set to true, since
 * otherwise you could not distinguish between the field being unset and the
 * field being set to the default value.
 * bool default = 1;
 *
 * @generated from message stately.schemamodel.BoolOptions
 */
export const BoolOptions = /*@__PURE__*/ proto3.makeMessageType(
  "stately.schemamodel.BoolOptions",
  [],
);

/**
 * default sets the default value for this field. Usually a proto field's
 * default (unset) value would be "", but if this is set, it will be used
 * instead when the field is unset. Setting this option implies the "optional"
 * (or field_presence.explicit) field option is also set to true, since
 * otherwise you could not distinguish between the field being unset and the
 * field being set to the default value.
 * string default = 1;
 *
 * @generated from message stately.schemamodel.StringOptions
 */
export const StringOptions = /*@__PURE__*/ proto3.makeMessageType(
  "stately.schemamodel.StringOptions",
  () => [{ no: 2, name: "interpret_as", kind: "enum", T: proto3.getEnumType(StringInterpretAs) }],
);

/**
 * default sets the default value for this field. Usually a proto field's
 * default (unset) value would be an empty byte string, but if this is set, it
 * will be used instead when the field is unset. Setting this option implies
 * the "optional" (or field_presence.explicit) field option is also set to
 * true, since otherwise you could not distinguish between the field being
 * unset and the field being set to the default value.
 * bytes default = 1;
 *
 * @generated from message stately.schemamodel.BytesOptions
 */
export const BytesOptions = /*@__PURE__*/ proto3.makeMessageType(
  "stately.schemamodel.BytesOptions",
  () => [{ no: 2, name: "interpret_as", kind: "enum", T: proto3.getEnumType(BytesInterpretAs) }],
);
