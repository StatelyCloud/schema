// @generated by protoc-gen-es v2.2.3 with parameter "target=js+dts,import_extension=.js"
// @generated from file migration.proto (package stately.schemamodel, syntax proto3)
/* eslint-disable */

import type { Message } from "@bufbuild/protobuf";
import type { GenFile, GenMessage } from "@bufbuild/protobuf/codegenv1";

/**
 * Describes the file migration.proto.
 */
export declare const file_migration: GenFile;

/**
 * Migration describes the complete set of commands to convert from one schema
 * version to the next. See
 * https://www.notion.so/Publishing-New-Schema-Versions-123b8fbb925d80b1bf93fe86ef49fd1d
 * for how this works. At a high level, these migration instructions are sent to
 * the server in a SchemaService.Put, along with a fully-specified schema
 * FileDescriptorProto representing the new state. The server then loads the old
 * schema version's FileDescriptorProto and uses the Migration's commands to
 * figure out how to build new type mappings for the new schema version.
 *
 * @generated from message stately.schemamodel.Migration
 */
export declare type Migration = Message<"stately.schemamodel.Migration"> & {
  /**
   * from_schema_version is the original schema version that we're migrating
   * from. The migration will start from this version's file descriptor and then
   * apply all the migration commands in order to produce a new schema version.
   *
   * @generated from field: uint64 from_schema_version = 1;
   */
  fromSchemaVersion: bigint;

  /**
   * name is a human-readable name of the migration. This is used to identify
   * the migration in the migration history, but otherwise has no effect on the
   * migration itself.
   *
   * @generated from field: string name = 2;
   */
  name: string;

  /**
   * commands is the ordered list of changes to apply to the schema.
   *
   * @generated from field: repeated stately.schemamodel.MigrationCommand commands = 3;
   */
  commands: MigrationCommand[];
};

/**
 * Describes the message stately.schemamodel.Migration.
 * Use `create(MigrationSchema)` to create a new message.
 */
export declare const MigrationSchema: GenMessage<Migration>;

/**
 * @generated from message stately.schemamodel.MigrationCommand
 */
export declare type MigrationCommand = Message<"stately.schemamodel.MigrationCommand"> & {
  /**
   * type_name is the fully qualified protobuf name of the type that this
   * command is modifying. It may refer to an item, object, or enum type.
   *
   * @generated from field: string type_name = 1;
   */
  typeName: string;

  /**
   * actions is the ordered list of changes to apply to the type.
   *
   * @generated from field: repeated stately.schemamodel.MigrateAction actions = 2;
   */
  actions: MigrateAction[];
};

/**
 * Describes the message stately.schemamodel.MigrationCommand.
 * Use `create(MigrationCommandSchema)` to create a new message.
 */
export declare const MigrationCommandSchema: GenMessage<MigrationCommand>;

/**
 * A single action to take on a particular type. The type_name is specified in
 * the parent MigrationCommand.
 *
 * @generated from message stately.schemamodel.MigrateAction
 */
export declare type MigrateAction = Message<"stately.schemamodel.MigrateAction"> & {
  /**
   * @generated from oneof stately.schemamodel.MigrateAction.action
   */
  action:
    | {
        /**
         * Item Type / Object Type Fields
         *
         * @generated from field: stately.schemamodel.AddField add_field = 2;
         */
        value: AddField;
        case: "addField";
      }
    | {
        /**
         * @generated from field: stately.schemamodel.RemoveField remove_field = 3;
         */
        value: RemoveField;
        case: "removeField";
      }
    | {
        /**
         * TODO: ChangeFieldType change_field_type = ?;
         * TODO: convert field to / from repeated
         *
         * @generated from field: stately.schemamodel.RenameField rename_field = 4;
         */
        value: RenameField;
        case: "renameField";
      }
    | {
        /**
         * Item/Object/Enum Types
         *
         * @generated from field: stately.schemamodel.RenameType rename_type = 6;
         */
        value: RenameType;
        case: "renameType";
      }
    | {
        /**
         * @generated from field: stately.schemamodel.RemoveType remove_type = 7;
         */
        value: RemoveType;
        case: "removeType";
      }
    | {
        /**
         * @generated from field: stately.schemamodel.AddType add_type = 8;
         */
        value: AddType;
        case: "addType";
      }
    | { case: undefined; value?: undefined };
};

/**
 * Describes the message stately.schemamodel.MigrateAction.
 * Use `create(MigrateActionSchema)` to create a new message.
 */
export declare const MigrateActionSchema: GenMessage<MigrateAction>;

/**
 * AddField adds an entirely new, full-specified field to an item/object type.
 *
 * @generated from message stately.schemamodel.AddField
 */
export declare type AddField = Message<"stately.schemamodel.AddField"> & {
  /**
   * name is the name of the field to add. This should be used to look up the
   * descriptor for that field in the new schema.
   * TODO: This could also be a field number, if the DSL code wants to
   * cross-reference with the actual final FileDescriptorProto. That said, it
   * may be easier to just send up field names and let the server do the
   * validation.
   *
   * TODO: The other option is to include the full FieldDescriptorProto here:
   * field is the full spec for the field to add, including any Stately
   * extensions.
   * google.protobuf.FieldDescriptorProto field = 1 [(buf.validate.field).required = true];
   *
   * @generated from field: string name = 1;
   */
  name: string;
};

/**
 * Describes the message stately.schemamodel.AddField.
 * Use `create(AddFieldSchema)` to create a new message.
 */
export declare const AddFieldSchema: GenMessage<AddField>;

/**
 * RemoveField removes a field from an item/object type.
 *
 * @generated from message stately.schemamodel.RemoveField
 */
export declare type RemoveField = Message<"stately.schemamodel.RemoveField"> & {
  /**
   * name is the name of the field to remove. This can be used to look up the
   * field in the old (from_schema_version) schema.
   *
   * @generated from field: string name = 1;
   */
  name: string;
};

/**
 * Describes the message stately.schemamodel.RemoveField.
 * Use `create(RemoveFieldSchema)` to create a new message.
 */
export declare const RemoveFieldSchema: GenMessage<RemoveField>;

/**
 * RenameField renames a field in an item/object type.
 *
 * @generated from message stately.schemamodel.RenameField
 */
export declare type RenameField = Message<"stately.schemamodel.RenameField"> & {
  /**
   * old_name is the name of the field to rename. This can be used to look up
   * the field in the old (from_schema_version) schema.
   *
   * @generated from field: string old_name = 1;
   */
  oldName: string;

  /**
   * new_name is the new name of the field. This can be used to look up the
   * field in the new schema.
   *
   * @generated from field: string new_name = 2;
   */
  newName: string;
};

/**
 * Describes the message stately.schemamodel.RenameField.
 * Use `create(RenameFieldSchema)` to create a new message.
 */
export declare const RenameFieldSchema: GenMessage<RenameField>;

/**
 * RenameType renames an item, object, or enum type.
 *
 * @generated from message stately.schemamodel.RenameType
 */
export declare type RenameType = Message<"stately.schemamodel.RenameType"> & {
  /**
   * new_name is the new name of the type. This can be used to look up the
   * descriptor for that type in the new schema.
   *
   * @generated from field: string new_name = 2;
   */
  newName: string;
};

/**
 * Describes the message stately.schemamodel.RenameType.
 * Use `create(RenameTypeSchema)` to create a new message.
 */
export declare const RenameTypeSchema: GenMessage<RenameType>;

/**
 * RemoveType removes an item, object, or enum type.
 *
 * The name of the type is in the type_name field of the parent MigrationCommand.
 *
 * @generated from message stately.schemamodel.RemoveType
 */
export declare type RemoveType = Message<"stately.schemamodel.RemoveType"> & {};

/**
 * Describes the message stately.schemamodel.RemoveType.
 * Use `create(RemoveTypeSchema)` to create a new message.
 */
export declare const RemoveTypeSchema: GenMessage<RemoveType>;

/**
 * AddType adds an entirely new, full-specified item/object/enum type to the schema.
 *
 * @generated from message stately.schemamodel.AddType
 */
export declare type AddType = Message<"stately.schemamodel.AddType"> & {
  /**
   * name is the name of the object/item/enum to add. This should be used to look up the
   * descriptor for that type in the new schema.
   *
   * @generated from field: string name = 1;
   */
  name: string;
};

/**
 * Describes the message stately.schemamodel.AddType.
 * Use `create(AddTypeSchema)` to create a new message.
 */
export declare const AddTypeSchema: GenMessage<AddType>;
